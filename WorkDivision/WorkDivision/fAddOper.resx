<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAf//AAH//wAD//+AB///wA///+A////gf8=
</value>
  </data>
</root>